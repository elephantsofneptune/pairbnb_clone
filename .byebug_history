c
q
ENV["BRAINTREE_PUBLIC_KEY"]
ENV["BRAINTREE_PRIVATE_KEY"]
ENV
Braintree::ClientToken.generate
params
c
image.image.url
image.image
image
image.url
image
c
quit
x.listing
x = @listing.listing_attachments.first
@listing.listing_attachments.first
@listing.listing_attachments
@listing.listing_attachments.count
@listing.listing_attachments
@listing.listing_attachments.each
@listing.listing_attachments
@listing.images
@listing
c
params[:listing_attachments].each {|x| p x}
params[:listing_attachments].each {|x| p x.class}
params[:listing_attachments].each {|x| p x}
params[:listing_attachments]
params[:listing_attachments]['image']
params[:listing_attachments]
c
params[:listing_attachments]
params
c
params[:listing_attachments]
c
params[:listing_attachments]
params[:listing_attachments]['image']
params[:listing_attachments]
params
c
listing_from_params[:images]
listing_from_params.images
listing_from_params
@listing.update(listing_from_params)
@listing
@listing[:images]
@listing
c
y.each {|x| p x }
y.each {|x| p x.class }
y.each {|x| x.class }
sadf
asdf
asdfasd
y.each {|x| x.class }
y.each {|x| x.class}
y.each {|x| p x}
y = listing_from_params[:images]
listing_from_params[:images]
listing_from_params
x.update(listing_from_params.to_hash)
x.update(listing_from_params.to_a)
x.update(listing_from_params)
x = Listing.find(params[:id])
Listing.find(params[:id])
@listing.find(params[:id])
@listing
c
@listing.images
c
@listing.images.each {|x| p x}
@listing.images
@listing.images.each
@listing.images
c
@listing.images.each {|x| p x}
@listing.images
@listing.images.mounted_as
@listing.images.mounted_as[:images]
@listing.images.mounted_as
@listing.images
@listing.image
@listing
c
reservation_from_params[:start_date].empty?
reservation_from_params[:date_start].empty?
c
reservation_from_params[:date_start].empty?
reservation_from_params.nil?
reservation_from_params.present?
reservation_from_params.empty?
reservation_from_params[:date_start].empty?
reservation_from_params[:date_start].nil?
reservation_from_params[:date_start]
reservation_from_params
c
@reservation.errors.messages[:messages].join
@reservation.errors.messages[:messages]
@reservation.errors.messages[:messages].join
@reservation.errors.messages[:messages].to_s
@reservation.errors.messages
@reservation.errors.messages[:messages]
@reservation.errors.messages[:messages].to_s
@reservation.errors.messages[:messages]
@reservation.errors.messages
@reservation.errors
@reservation
c
n
self
self.errors
self
n
self.errors
self
c
errors.full_messages
errors.messages
errors
self.errors.messages
self.errors
self
c
flash[:notice]
flash
c
self.errors
n
self.errors
self
c
self.errors.full_messages
self.errors.messages
self.errors
self
c
@user.errors.full_messages
@user.errors
@user
user
params
sadfsadf
asdfsadf
asdfasd
c
@user.errors.full_messages
@user.errors
@user
c
n
flash[:alert].each {|x| p x}
flash[:alert].each do |x|
flash[:alert]
n
flash[:alert]
flash
c
n
params
c
n
N
c
@listing.errors.full_messages.each {|x| p x }
@listing.errors.full_messages.each {|x| x }
@listing.errors.full_messages.each do |x|
@listing.errors.full_messages
@listing.errors
@listing.errors.each do |x|
@listing.errors
@listing.errors.nil?
@listing.errors.present?
@listing.errors.empty?
@listing.errors
@listing
params[:listing]
params[:listing].errors
params
c
@listing.errors.full_messages
@listing.errors.messages
@listing.errors
c
n
params[:success]
params
c
q
params
c
q
params[:success]
params
c
@listing.images
@listing.images[:images]
@listing.images
@listing.images.empty?
@listing.images.nil?
@listing.images.each
@listing.images
@listing
c
params[:reservation].errors
params[:reservation]
params.reservations
params.reservation
params
self.errors
self
params.errors
params
c
n
@reservation
c
@reservation.errors.messages[:overlapping_dates]c
@reservation.errors.messages[:overlapping_dates].pop
@reservation.errors.messages[:overlapping_dates]
@reservation.errors.messages
@reservation.errors
@listing.errors
@listing.errors.messages
@listing.errors.messages[:overlapping_dates]
@listing[:overlapping_dates]
params[:overlapping_dates]
params
params.errors
params.error
format.error
format
error
@listing
params
c
~c
c
self.errors.messages[:overlapping_dates].pop
self.errors.messages[:overlapping_dates]
self.errors.messages[:overlapping_dates].to_s
self.errors.messages[:overlapping_dates].flatten
self.errors.messages[:overlapping_dates]
self.errors.messages
self.errors.messages.full_messages
self.errors.messages
self.errors
x
n
reservation
self
c
@reservation.error
@reservation.errors
